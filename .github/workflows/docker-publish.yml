name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: '21 0 * * *'
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:

  linter:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Code Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      # Consider using pre-commit.ci for open source project
      - name: Run pre-commit
        uses: pre-commit/action@v3.0.0


  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    outputs:
      testimage: "${{ steps.meta-test.outputs.tags }}"
      pgimage: "${{ steps.meta-pg.outputs.tags }}"
      nginximage: "${{ steps.meta-nginx.outputs.tags }}"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v1.13.1'


      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@master
        with:
          install: true

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-multi-buildx

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=auto
          tags: |
            type=schedule,pattern={{date 'YYYYMMDD'}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,enable=false

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: compose/production/django/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}

      ### TEST container

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta-test
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            suffix=-test
            latest=false
          tags: |
            type=schedule,pattern={{date 'YYYYMMDD'}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag,value=latest-test
            type=sha,enable=false

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push-test
        uses: docker/build-push-action@v2
        with:
          context: .
          file: compose/local/django/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-test.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${{ steps.meta-test.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push-test.outputs.digest }}

      ### NGINX container

      - name: Cache Docker layers for NGINX container
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-nginx-cache
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-multi-buildx-nginx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-multi-buildx-nginx

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata for NGINX container
        id: meta-nginx
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-nginx
          tags: |
            type=schedule,pattern={{date 'YYYYMMDD'}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,enable=false

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image for NGINX container
        id: build-and-push-nginx
        uses: docker/build-push-action@v2
        with:
          context: .
          file: compose/production/nginx/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-nginx.outputs.tags }}
          labels: ${{ steps.meta-nginx.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-nginx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-nginx-cache-new

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image for NGINX container
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${{ steps.meta-nginx.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push-nginx.outputs.digest }}

      ### POSTGRESQL container

      - name: Cache Docker layers for POSTGRESQL container
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-pg-cache
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-multi-buildx-pg-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-multi-buildx-pg

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata for POSTGRESQL container
        id: meta-pg
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-pg
          tags: |
            type=schedule,pattern={{date 'YYYYMMDD'}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,enable=false

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image for POSTGRESQL container
        id: build-and-push-pg
        uses: docker/build-push-action@v2
        with:
          context: .
          file: compose/production/postgres/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-pg.outputs.tags }}
          labels: ${{ steps.meta-pg.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-pg-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-pg-cache-new

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image for POSTGRESQL container
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${{ steps.meta-pg.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push-pg.outputs.digest }}

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          rm -rf /tmp/.buildx-nginx-cache
          mv /tmp/.buildx-nginx-cache-new /tmp/.buildx-nginx-cache
          rm -rf /tmp/.buildx-pg-cache
          mv /tmp/.buildx-pg-cache-new /tmp/.buildx-pg-cache

  pytest:
    runs-on: ubuntu-latest

    needs: build

    steps:

      - name: Test
        run: >
          echo "${{ needs.build.outputs.testimage }}"

      - name: Checkout Code Repository
        uses: actions/checkout@v3

      - name: Run DB Migrations
        run:  >
          DJANGO_IMAGE=$(echo "${{ needs.build.outputs.testimage }}" | head -1)
          POSTGRES_IMAGE=$(echo "${{ needs.build.outputs.pgimage }}" | head -1)
          NGINX_IMAGE=$(echo "${{ needs.build.outputs.nginximage }}" | head -1)
          docker-compose -f ci.yml run --rm django python manage.py migrate

      - name: Run Django Tests
        run:  >
          DJANGO_IMAGE=$(echo "${{ needs.build.outputs.testimage }}" | head -1)
          POSTGRES_IMAGE=$(echo "${{ needs.build.outputs.pgimage }}" | head -1)
          NGINX_IMAGE=$(echo "${{ needs.build.outputs.nginximage }}" | head -1)
          docker-compose -f ci.yml run django pytest
